@model PlayPalMini.MVC.Models.RegisteredUserView

@{
    ViewBag.Title = "EditUserAsync";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Edit user info</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @if (User.Identity.IsAuthenticated)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Username, "Change Username", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pass, "Change Password", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Pass, new { htmlAttributes = new { @class = "form-control", type = "password" } })
                @Html.ValidationMessageFor(model => model.Pass, "", new { @class = "text-danger" })
            </div>
        </div>
        if (User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.UserRole, "Change user role", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserRole, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserRole, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div style="margin-bottom: 12px;"></div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default"
                       style="background-color: #f2f2f2; color: #333; padding: 4px 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 8px; cursor: pointer; text-decoration: none;"
                       onmouseover="this.style.backgroundColor='#dcdcdc'" onmouseout="this.style.backgroundColor='#f2f2f2'" />
            </div>

        </div>
    }
    else
    {
        <p>You should log in first.</p>
    }
    </div>
    
    if (TempData["ConfirmationMessage"] != null)
    {
        <div class="alert alert-success">@TempData["ConfirmationMessage"]</div>
    }
}
@if (User.IsInRole("Administrator"))
{
    <div style="margin-bottom: 12px;"></div>
    <a href="@Url.Action("GetAllUsersAsync", "RegisteredUser")"
       style="background-color: #f2f2f2; color: #333; padding: 4px 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 8px; cursor: pointer; text-decoration: none;"
       onmouseover="this.style.backgroundColor='#dcdcdc'" onmouseout="this.style.backgroundColor='#f2f2f2'">Back to list of all users</a>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
